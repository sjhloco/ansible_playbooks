# need to install this on the ansibel host first pip install PyVmomi
- name: "VMware VM deployments"
  hosts: localhost


  vars_files:
    - vars/ansible.yml
    - vars/vms.yml

  tasks:
  # Can be used against esx or vcentre, just change the hostname from vcentre to ESX serevr
    - name: Deploy VM in vCentre using OVF (natlab)
      vmware_deploy_ovf:
        hostname: "{{ login.vcenter }}"
        username: "{{ login.user }}"
        password: "{{ login.pass }}"
        validate_certs: false
        datacenter: DC1
        datastore: ds1
        folder: /DC1/vm/red
        name: DC1-XNET-CSR01
        disk_provisioning: thin
        # Need the name of interface on VM (key) and port-group (value). Not sure if interface on the VM will chanege for other device types
        # networks: "{u'VM Network':u'data'}"
        ova: /home/ste/csr1000v-universalk9.16.09.06.ova
        power_on: no
        fail_on_spec_warnings: yes
        wait: yes
        # Inject the properties through VMware Tools. Think these are vApp options. Need to check if can use to deploy CSR with settings
        # wait_for_ip_address: yes
        # inject_ovf_env: yes
        # properties:
        #   vami.hostname: vmware-vidm.sgroot.local
        #   vami.ip0.IdentityManager: "10.1.10.120"
        #   vami.netmask0.IdentityManager: "255.255.255.0"
        #   vami.gateway.IdentityManager: "10.1.10.254"
        #   vami.DNS.IdentityManager: "10.1.10.10"
        #   vami.domain.IdentityManager: sgroot.local
        #   vami.searchpath.IdentityManager: sgroot.local
        #   ceip.enabled: yes
        #   vamitimezone: "Europe/London"
      tags: ovf_vc

    - name: Deploy VM in ESX using OVF (home)
      vmware_deploy_ovf:
        hostname: 10.10.10.54
        username: root
        password: mango12!
        validate_certs: false
        datastore: ds2
        name: DSL_template
        disk_provisioning: thin
        # Need the name of interface on VM (key) and port-group (value).
        networks: "{u'VM Network':u'HM_TRUST_VL20'}"
        ova: /home/ste/dsl-4-4-10.ova
        power_on: yes
        fail_on_spec_warnings: yes
      tags: ovf_esx

  # To create an emtpy shell of a VM with the ISO loaded
    - name: Create empty Virtual Machine shell
      vmware_guest:
        hostname: "{{ login.vcenter }}"
        username: "{{ login.user }}"
        password: "{{ login.pass }}"
        validate_certs: false
        esxi_hostname: 192.168.10.41
        datacenter: ET
        folder: /ET/vm/checkpoint           # need 'vm' between datacentre and your folder the VM will be created in
        name: "{{ item.name }}"
        guest_id: "{{ item.id }}"
        disk:
        - size_gb: "{{ item.hdd }}"
          type: thin
          datastore: ds1
        hardware:
          memory_mb: "{{ item.mem }}"
          num_cpus: "{{ item.cpu }}"
          scsi: lsilogicsas
          # Unhash these if are increasing the cpu or memorty of an existing VM
          # hotadd_cpu: True
          # hotadd_mem: True
        networks:
          - name: "{{ item.vlan }}"
            device_type: e1000e
          - name: "{{ item.vlan1 }}"
            device_type: e1000e
          - name: "{{ item.vlan2 }}"
            device_type: e1000e
        cdrom:
          type: iso
          iso_path: "{{ item.image }}"
        state: "{{ item.state }}"
      loop: "{{ vm_shell }}"
      tags: vm_shell

# To create a VM from a template and giving basic details such as IP and hostname
    - name: "Create VMs from templates"
      block:
      - name: SYS >> Create 2-tiered nested dict from origianl 3-tiered DM
        set_fact:
          flt_vm_tmpl: "{{ vm_tmpl |nested_3layer() }}"
      - name: SYS >> Create Virtual Machines from templates
        vmware_guest:
          hostname: "{{ login.vcenter }}"
          username: "{{ login.user }}"
          password: "{{ login.pass }}"
          validate_certs: false
          datacenter: "{{ item.0.dc }}"
          esxi_hostname: "{{ item.0.esx_host }}"
          datastore: "{{ item.0.ds }}"
          folder: "{{ item.1.dir }}"
          name: "{{ item.1.name }}"
          template: "{{ item.1.tmpl }}"
          # Only need if different to template
          # hardware:
          #   memory_mb: "{{ item.1.mem }}"
          #   num_cpus: "{{ item.1.cpu }}"
          #   scsi: lsilogicsas
          # disk:
          # - size_gb: "{{ item.1.hdd }}"
          #   type: thin
          networks:
            - name: "{{ item.1.vlan }}"
              device_type: e1000e
              ip: "{{ item.1.ip }}"
              netmask: "{{ item.1.mask }}"
              gateway: "{{ item.1.gw }}"
              mac:  "{{ item.1.mac }}"
          customization:
            hostname: "{{ item.1.name }}"
            domain: fos.org.uk
            dns_servers: [8.8.8.8, 1.1.1.1]
            dns_suffix: [fos.org.uk]
            timezone: "{{ item.1.timezone }}"       # Uses different form at for Linux and windows
            wait_for_customization: yes
            wait_for_ip_address: True
          state: "{{ item.1.state }}"
          force: yes                                # Needed if state is absent and VM powered om
        loop: "{{ flt_vm_tmpl | subelements('vms') }}"
      # - debug:
      #     var: item.1
      #   loop: "{{ flt_vm_tmpl | subelements('vms') }}"
      tags: vm_tmpl




# MAC does not work !!!!
# Windows template does not set Ip details !!!!





# https://docs.ansible.com/ansible/latest/modules/vmware_guest_module.html
# https://www.simplygeek.co.uk/2019/07/18/automate-vsphere-virtual-machine-and-ova-appliance-deployments-using-ansible/
# https://graspingtech.com/ansible-deploy-vmware-vm/
# https://hyperhci.com/2019/12/21/configure-lacp-lag-on-vds-vmware-distributed-vswitch-best-practice/
# https://docs.ansible.com/ansible/2.5/modules/vmware_dvs_portgroup_module.html
# https://jbcomp.com/lacp-configuration-in-vsphere-6-5/


