---
########################## AZURE Plays ##########################
######### Create all or part of the Azure elements of the VPN #########

## 1. Create a Resource Group - Container in a geographical location that holds everything (all other elements default to resource group location)
- block:
  - name: CLD  >> Creating resource group
    azure_rm_resourcegroup:
      name: "{{ rg_name }}"
      location: "{{ cld_region }}"
      state: present
  # Create public IP
  - name: CLD >> Creating Public IP address
    azure_rm_publicipaddress:
      resource_group: "{{ rg_name }}"
      name: "{{ public_ip_name }}"
      allocation_method: Dynamic
      state: present

## 2 Create a virtual network (supernet) that is the interesting traffic for the VPN
  - name: CLD  >> Creating Virtual Network
    azure_rm_virtualnetwork:
      name: "{{ vn_name }}"
      resource_group: "{{ rg_name }}"
      address_prefixes_cidr: "{{ item }}"
      state: present
    loop: "{{ vn_addr_spc }}"
  # Create subnets within the virtual network
  - name: CLD  >> Creating subnets
    azure_rm_subnet:
      name: "{{ item.key }}"
      virtual_network_name: "{{ vn_name }}"
      resource_group: "{{ rg_name }}"
      address_prefix_cidr: "{{ item.value }}"
      state: present
    loop: "{{ cld_subnets|dict2items }}"
  # Create gateway subnet (internal Azure link between VPN gateway and Virtual Network)
  - name: CLD  >> Creating gateway subnet
    azure_rm_subnet:
      name: "{{ gw_subnet_name }}"
      virtual_network_name: "{{ vn_name }}"
      resource_group: "{{ rg_name }}"
      address_prefix_cidr: "{{ gw_subnet_prfx }}"
      state: present
  tags: deploy

## 3. Login to AZ CLI as no modules for some of the commands
- set_fact:
    az_creds: "{{ lookup('file', '~/.azure/credentials') }}"
  check_mode: no
  tags: [deploy, destroy, vpn_down, vpn_up]
- name: CLD >> AZ CLI login
  command: "{{ az_creds | az_login }}"
  check_mode: no
  tags: [deploy, destroy, vpn_down, vpn_up]

## 4. Create the Azure VPN gateway - Links public IP and GatewaySubnet
- block:
  - name: CLD >> Creating virtual network gateway (route-based VPN) - Be  patient it takes a while
    azure_rm_virtualnetworkgateway:
      resource_group: "{{ rg_name }}"
      name: "{{ cld_gateway }}"
      ip_configurations:
        - name: ipconfig
          private_ip_allocation_method: Dynamic
          public_ip_address_name: "{{ public_ip_name }}"
          subnet: "{{ gw_subnet_name }}"
      virtual_network: "{{ vn_name }}"
      vpn_type: route_based
      state: present
    when: tunnel_type == 'route_based'

  - name: CLD >> Creating virtual network gateway (policy-based VPN) - Be  patient it takes a while
    command: >
      az network vnet-gateway create
      --name {{ cld_gateway }}
      --resource-group {{ rg_name }}
      --public-ip-address {{ public_ip_name }}
      --vnet {{ vn_name }}
      --gateway-type Vpn
      --vpn-type PolicyBased
      --sku Basic
    when: tunnel_type == 'policy_based'
  tags: [deploy, vpn_up]

## 5. Create the local network gateway - stores the VPN peer IP and the interesting traffic at the remote site
# check if the local network gateway exists
- block:
  - name: CLD >> Checking if local network gateway exists
    shell: az network local-gateway list -g {{ rg_name }}
    register: local_gw
  - set_fact:
      local_gw_exists: "{{ local_gw.stdout|check_az_show(rmte_gateway) }}"
  tags: [deploy, vpn_up]
# Create facts from local gateway for remote peer and subnets
- block:
  - name: CLD >> Creating facts from local gateway output
    shell: az network local-gateway show -n {{ rmte_gateway }} -g {{ rg_name }}
    register: gateway
  - set_fact:
      cfg_peer: "{{ (gateway.stdout | from_json).gatewayIpAddress }}"
  - set_fact:
      cfg_prfxs: "{{ (gateway.stdout | from_json).localNetworkAddressSpace.addressPrefixes }}"
  when: local_gw_exists|bool
  tags: [deploy, vpn_up]
# Updates local gateway if remote peer or subnet changes
- block:
  - name: CLD >> Updating local gateway (remote peer and subnets)
    command: >
      az network local-gateway update
      --name {{ rmte_gateway }}
      --resource-group {{ rg_name }}
      --gateway-ip-address {{ hostvars.localhost.rmte_public_ip }}
      --local-address-prefixes {{ rmte_subnets|rmte_prfxs }}
    when: |
      local_gw_exists|bool and
      (cfg_peer != rmte_public_ip or
      cfg_prfxs | symmetric_difference(rmte_subnets))
  # Creates the local gateway if it doesn't exist
  - name: CLD >> Creating local gateway (remote peer and subnets)
    command: >
      az network local-gateway create
      --name {{ rmte_gateway }}
      --resource-group {{ rg_name }}
      --gateway-ip-address {{ hostvars.localhost.rmte_public_ip }}
      --local-address-prefixes {{ rmte_subnets|rmte_prfxs }}
    when: not local_gw_exists|bool
  tags: [deploy, vpn_up]

## 6. Create VPN connection - Link the VPN Gateway (AZ peer and subnets) to the local network gateway (remote peer and subnets)
# check if the vpn-conn exists
- block:
  - name: CLD >> Checking if VPN connection exists
    shell: az network vpn-connection list -g {{ rg_name }}
    register: vpn_conns
  - set_fact:
      vpn_conn_exists: "{{ vpn_conns.stdout|check_az_show(vpn_connection) }}"
  tags: [deploy, vpn_up]
# Gets PSK from the vpn-conn
- block:
  - name: CLD >> Getting current PSK
    command: az network vpn-connection show -n {{ vpn_connection }} -g {{ rg_name }}
    register: psk_value
  - set_fact:
      psk1: "{{ (psk_value.stdout | from_json).sharedKey }}"
  when: vpn_conn_exists|bool
  tags: [deploy, vpn_up]
# Updates the PSK if it is different
- name: CLD >> Updating the PSK
  shell: az network vpn-connection update -n {{ vpn_connection }} -g {{ rg_name }} --shared-key {{ psk }}
  when: vpn_conn_exists|bool and (psk1 != psk)
  tags: [deploy, vpn_up]
# Creates the VPN connection if it doesn't already exist
- name: CLD >> Creating VPN connection (link AZ and remote peer)
  command: >
    az network vpn-connection create
    --name {{ vpn_connection }}
    --resource-group {{ rg_name }}
    --vnet-gateway1 {{ cld_gateway }}
    --shared-key {{ psk }}
    --local-gateway2 {{ rmte_gateway }}
    --use-policy-based-traffic-selectors {% if tunnel_type == 'route_based' %} true {% else %} false {% endif %}
  when: not vpn_conn_exists|bool
  tags: [deploy, vpn_up]

## 7. Create VPN connection IPsec policy - Holds all IPsec algorithms
- name: CLD >> Creating VPN connection IPSEC policy
  command: >
    az network vpn-connection ipsec-policy add
    --connection-name {{ vpn_connection }}
    --resource-group {{ rg_name }}
    --dh-group DHGroup{{ dh }}
    --ike-encryption {{ p1_encr | replace("-", "") | replace("3des", "DES3") | upper }}
    --ike-integrity {{ p1_hash | upper }}
    --ipsec-encryption {{ p2_encr | replace("-", "") | replace("3des", "DES3") | upper }}
    --ipsec-integrity {{ p2_hash | replace("-", "") | upper }}
    --pfs-group {{ pfs | replace("group", "PFS") }}
    --sa-lifetime {{ sa_life }}
    --sa-max-size {{ sa_size }}
  notify: az_logout
  when: not vpn_conn_exists|bool and tunnel_type == 'route_based'
  tags: [deploy, vpn_up]

########## Delete all the Azure elements of the VPN ##########
## Deletes the connection, local gateway (remote site), VPN gateway and public IP.
- name: CLD >> Deleting VPN connection elements - Be patient it takes a while
  command: "{{ item }}"
  loop:
    - az network vpn-connection delete --name {{ vpn_connection }} --resource-group {{ rg_name }}
    - az network local-gateway delete --name {{ rmte_gateway }} --resource-group {{ rg_name }}
    - az network vnet-gateway delete --name {{ cld_gateway }} --resource-group {{ rg_name }}
    - az network public-ip delete --name {{ public_ip_name }} --resource-group {{ rg_name }}
  notify: az_logout
  tags: destroy

########## Bring down certain elements (chargeable elements) to break the VPN ##########
## Deletes the connection and VPN gateway
- name: CLD >> Deleting VPN connection elements - Be patient it takes a while
  command: "{{ item }}"
  loop:
    - az network vpn-connection delete --name {{ vpn_connection }} --resource-group {{ rg_name }}
    - az network vnet-gateway delete --name {{ cld_gateway }} --resource-group {{ rg_name }}
  notify: az_logout
  tags: vpn_down